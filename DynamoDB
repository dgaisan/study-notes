DMS History
	- Magnetic Tape (very expensive)
	- in 70’s IBM and AA created SABRE (still in use)
	- ANSI SQL created in 80’s
	- XML was created in 90’s
	- NoSQL created in ’98
	- DynamoDB launched in ~2012..

SQL vs NoSQL
	RDB
		Tables (rows, columns, indexes)
		Enforce constrains (data types, ralations)
		Relations: allows for flexible queries
		Storage: concentrated (typically one node contains all data, unless partitioned)
		Scale
			Vertical: better machine (more memory, cpu, disk)
			Horizontal: one master + multiple read replicas
	NoSQL
		non-relational data (table document, graph)


Data normalization
	- Relational database were created to decrease storage pressure (vs magnetic disc storage)
	- Data was normalized to save space and cost
	- Normalization is a process of de-duplicating data in the DB to optimize for space
	- Normalization suggests to structure relational databases in accordance with a series of Normal Forms (1NF, 2NF, etc…)
	- Relational DB features
		- Optimized for storage
		- Normalized
		- Relational 
		- Supports AdHoc queries
		- Scales vertically (meaning that to scale up a bigger “box” needs to be purchased)

OLAP - Online analytical processing
	- SQL performs the best for this type of processing
OLTP - Online Transaction processing
	- Sql is still used for this type of processing
	- NoSql scales better for this type of applications
	- RDBMS cost grows geometrically with storage
	- RDBMS issues in the petabyte range
	- SQL is optimized for 30-year old problems


Data modeling
	- decide how the data is organized
	- Impacts application performance and cost
	- more requests = higher cost
	- SQL problems
		- Sparse data
			- A lot of records have empty/null attributes, which still take up some space
			- NoSQL does not have similar problems
	- SQL
		- Allow any query
	- NoSQL
		- Identify and optimize for most important queries (Access patterns)
		- Each access pattern should require a single Dynamo request
		- Use a few tables as possible - preferably a single table
		- Single table design helps avoid:
			- Using of transactional APIs
			- Multiple API calls
			- Higher latency to end users
			- more complexity per query - Fake Joins across Dynamo tables
			- higher cost - overconsumption of WCU, RCU


Relational Database
	- Information is separated into different tables each of which represents an entity
	- Tables are linked or related to each other using various IDs
	
	Terminology
		- Table: A collection of related data
		- Schema: overall structure of the database
		- Row: set of related values. (Eg Record, item, tuple)
		- Column: a unit of named data that has a particular datatype
		- Key: columns of which an index is constructed to allow rapid/sorted access to a row
			Candidate key: Any set of columns that can uniquely identify a row
			Primary Key: A candidate key that can uniquely identify any given row
			Foreign key: Uniquely identifies a value (PK) in a different table
		- Query: Data retrieval statement;

	ACID 
		- A sequence of DB ops that satisfies these props is called transaction
		- Atomicity: All operations occur or nothing
		- Consistency: no integrity errors
		- Isolation: Multiple tzx’s don’t bother each other
		- Durability: Committed data is saved by the system
	Scaling
		Scale DB when having too much load (thousands requests per second).
		- Replication (too much load/reads)
			- data is copied into read replica nodes
			- Offloads master node 
			- Read replicas can scale horizontally
			- cons: 
				does not increase the speed of writes
				replication lag
				master node is still a bottleneck

		- Sharding (too much data)
			- data is broken up into smaller chunks and saved to different nodes (save/lookup via hashcode)
			- can store larger data sets
			- can handle more load than a single master node
			- cons:
				queries become more complex
					range queries might hit all nodes
				joins become difficult or impossible

	Aurora vs RDS
		Aurora
			Aurora operates in a cluster way
			Only supports mysql & Postgress
			First create a cluster, then create read/write instances
			Distributed, fault-tolerant
			Aurora serverless
			3x performance with Postgrees & 5x performance on mysql (vs RDS)
			Parallel queries
			Migrations with almost no downtime 
			128TB storage limit
			read replica autoscaling 
			
		RDS
			Managed RDS
			Easy to setup and scale
			Easy to administer
			Supports mysql, postgrees, MSSQL, Oracle, MariaDB
			Need to use AWS Migration service to migrate
			64TB storage limit
			Downtime needed when scaling
			
			
			 

CAP
	1. Consistency - All clients see the same data at the same time
	2. Availability - the system continues to operate even in the presence of node failures
	3. Partition tolerance - the system continues to operate in spite of network failures

	- CAP theorem states: it’s impossible for a distributed data store to provide more than two  
		out of the following three guarantees:
					
	CA:
	AP:
	CP:		


NoSQL
	- built for specific data models and offer flexible schemas
	- Denormalized/hierarchical
	- Optimized for compute


Dynamo DB
	- Non relational database for applications that need performance at any scale
	- NOSQL managed DB service
	- Serves any level of request traffic
	- No need to provision instances or worry about storage
	- Must use several upfront decisions in order to supply proper performance
	- Consistent predictable performance
	- Single digit millisecond latency
	- Data of the backend lives on solid state drives
	- supports key-value and document data model
	- Unlimited throughput and storage
	- Engine Types:
		- Key-value: Data is stored as a collection of key-value pairs. Key - unique ID, Schemas are defined per item
			Use cases: Session store, shopping cart
		- Document Oriented: designed to store json like data
			Use cases: Content management, catalog
		- Column oriented: Stores each column of data in sequential blocks on disk/memory. Ideal for analytical queries.
			Use cases: Analytics, data warehouse
		- Graph: designed to store relationships. Data is stored as nodes and edges.
			Use cases: fraud detection, recommendation engines. 
	- BASE
		- Basic Availability: database appears to work most of the time
		- Soft state: stores don’t have to be write consistent
		- Eventually consistent: Stores exhibit consistency at some later point
	- The biggest advantage of NoSql databases is horizontal scaling (sharding)

Architecture
	- Data is stored in partitions. Partition - allocation of storage for a table (backed by SSD), and auto replicated across multiple AZs within AWS Region
		- Behind the scene DynamoDB is partitioning data in the table across multiple servers
		- Partition key design that doesn’t distribute I/O requests effectively can create HOT partitions that result in throttling and use provisioned capacity inefficiently
		- When reading items with composite key (partition + sort) sort key is optional, therefore query can return all items with specific partition key 
	- Partition management occurs automatically
	- no query language (query via API)
	- Table - collection of data. Table must contain a name, primary key, read/write thruput values. Tables have unlimited sizes
	- 2 types of Primary keys:
		- Partition key: 
			- simple primary key composed of 1 attribute known as partition key (also called hash attribute)
			- It’s mandatory. 
			- Determines data distribution.
		- Partition and sort key: 
			- composite primary key, it comprises 2 attributes. First attribute is partition key, 2nd attribute is Sort key (also called range attribute)
			- optional. 
			- models 1 to many relationships 
			- Supported operations
				- ==, <, >, >=, <=
				- “begins with”
				- “between”
				- sorted results
				- counts
				- top/bottom N values
				- paged responses
	- Max 3000 RCU, 1000 WCU per partition
			
	- Item: 
		- a table can contain multiple items
		- item is a unique group of attributes
		- item is similar to row/record is RDB
		- items are limited to 400kb
		- uniquely identified by primary key
		- PutItem
			- Writes a single item to a table (replaces existing item if existing primary key is supplied)
		- UpdateItem
			- Updates an item,
		- DeleteItem
			- deletes an item
	- Attribute
		- fundamental data element
		- similar to fields in RDB
		- up to 255 characters
	-Data types:
		- Scalar 
			- exactly one value: number, string boolean, and null. 
			- Apps must encode binary values in base64-encoded format before sending it to dynamo
			- number is used to represent date/time in unix epoch format (number of seconds since 1970)
			- string can be used to represent time in ISO 8601 format (“2020-12-21T16:11:00Z”)
		- Document 
			- complex structure with nested attributes (e.g. Json)
			- Lists and maps
			- list 
				- ordered collection of values ([“ABC”, 1,4, true, “Zyxyx”])
			- map 
				- unordered collection of name-value pairs (similar to JSON)
				- 400kb max
			- empty lists and maps are allowed
		- set
			- Multiple scalar values of the same type
			- each value in a set is unique
			- order is not preserved
			- empty sets not supported
			- [“A”, “B”, “C”]; [1,2,3,4], …

Indexes
	- referred as Secondary Indexes
	- Table can have multiple Secondary Indexes

	- Global Secondary Index (GSI)
		- Index that has a partition key and optional sort key that are different from base tables’ primary key
		- “global” means that the index can access data across all partitions of the base table
		- It can be viewed as a different table that contains attributes based on the base table
		- these indexes have their own thruput consumption (RCU/WCU are managed/calculated independently from base table)
		- eventually consistent queries only
		- default quota of 20 GSI’s per table
	- Local Secondary Index (LSI)
		- Index that must have the same partition key but a different sort key from the base table
		- “local” means that every partition of a local secondary index is bounded by the same partition key of the base table 
		- must be created at table creation time


Read/Write Capacity units (RCU/WCU)
	- Eventually vs strongly consistent reads
		- Eventually consistent reads might include stale data
		- Strongly consistent reads are always up to date but are subject to network delays
	- RCUs
		- One RCU represents one strongly consistent read request per second, or two eventually consistent read requests, for an item up to 4KB
		- Transactional read requests require 2 RCUs for items up to 4KB
		- Filtered query or scan results consume full read capacity
	- Write vs Transactional write
		- Writes are eventually consistent within one second or less
	- Write Capacity Units (WCU)
		- One WCU represents one write per second for an item up to 1KB in size
		- Transactional write requests require 2 WCUs for items up to 1KB
	- On-demand capacity
		- no minimum capacity that’s required, but pay more per request than provisioned capacity 
		- Idle tables not charged for read/write, but only for storage and backups
		- no capacity planning required, just make an API call
		- Eliminates the tradeoff of over and under provisioning
		- Use on-demand for newly launched products
			- Switch to Provision once a steady state is reached 
		- Different pricing model
			- $1.25  per million WCU (us-east-1)
			- $0.25 per million RCU
			- $0.25 per 1 GB of storage 
	- Provisioned capacity
		- Able to set a budget (max capacity)
		- Subject to throttling: ProvisionedThughputExceededException
		- Auto scaling available 
		- Rise of under-provision - monitor your metrics!
		- Lower price of API call
		- Free tier available
			- first 25 GB are free
			- first 25 RCU’s and WCU’s are free
			- example: 50 WCU, 50 RCU, 25GB will cost 14.04/mo 

Consistency model
	- Across all of DynamoDB is a backend of storage nodes, and consistent hashing algorithms helps DynamoDB determine on which storage node your partition lives
	- Storage node consists of SSDs
	- For high avalability each of partitions is replicated across 3 AZs
		- One of these 3 storage nodes is elected to be a leader. 
		- The cluster uses Paxos consensus algorithms to elect leader node - if the leader goes offline, Paxos will promote another Node to be a leader
	- Each requests into DynamoDb goes thru DynamoDB Request Router (thousands of routers)
		- For a write request Router determines Storage Node Leader based of the partition key of an item being written, and then it writes the data (then data is replicated into 2 other AZs because of eventual consistency)
		- For GetItem 
			- Requests comes into Request Router
			- Request if authenticated
			- Request go into Partition Metadata System to locate Storage Leader for a partition
			- In case of eventual consistency the R.Router will randomly select a storage node from which to read (there’s 1 in 3 chances of getting stalled data, due to replication delay)
				- That’s why eventually consistent reads are 50% cost of strongly consistent reads

Scans & Queries
	- Scan
		- Returns all items and attributes for a given table
		- Less efficient than other ops
		- Filtering results do not reduce RCU consumption; they simply discard data
		- Eventually consistent by default, but the ConsistentRead param can enable strongly consistent scan
		- Using queries is preferable, but occasional real world use scan is ok 
		- A single scan returns results that fit in 1 MB, pagination can be used to retrieve more than 1 MB
	- Query
		- Find items based on Primary Key or index values
		- 


One-To-Many Relationship
	- SQL
		- In SQL parent child relationship achieved by having 2 tables, where records from 2nd table point back to the first table by Id ( Orders(ID) -> OrderItems(OrderId))
	- DynamoDB
		- Parent child is achieved by using PartionKeys + SortKeys
		- Sort Key (SK) can be anything (order:item#1, order:item#2, shipTo, etc)
			- therefore to get all order, we can query by PartitionKey + “BeginsWith(order:item#2)”

Adjacency Lists (Many-to-Many Relationships)
	- design pattern for modeling many-to-many relationships
	- top level entries are represented using the partition key
	- any relationship with other entities are represented as an item within the partition by setting the value of the sort key to the target entity ID
 	- use GSI PK + GSI SK
	- Composite SortKey approach. ex: NV#LASVEGAS#89101


GSI Overloading (Partition overloading)
	- Minimizing the number of GSI reduces cost
	- Overload an attribute based on item’s context
	- Normally requires only on GSI
		

Write Sharding technique
	- One way to better distribute writes across partition key space in DynamoDB is to expand the space 
	- Add a random number to the end of partition key values to distribute loads
	- Eliminates Hot Keys write issue, that can result in throttling (to many write into a single partition)
	- Because partition key values are randomized the writes to the table are spread evenly across multiple partitions (results in better parallelism)
		- (candidate_A_1, candidate_A_2, candidate_A_3, ….)
	- in order to read all related items we would have to query for the items for all suffixes and merge results
		- a good technique to do it is to have a couldwatch/cron event that runs periodically  
	
Item Versioning technique 
	- Used for version tracking or auditing

Sparse Indexes
	- used to speed up queries and save some money
	- if the sort key doesn’t present in every item then the index is said to be sparse
	- to implement this technique create an LSI on some attribute (helps with filtering)
		- index only holds items that have values
		- remove value completely for some items to speed up index look up
		- query will work/return only with items that have values in SK

Materialized aggregations technique
	- Works with DynamoDB streams
		- Stream is like a change log for a table
		- working with streams doesn’t affect the availability of the table
		- streams + lambda is great for computed aggregations 
		- RCU is not used for reading


Batch Ops
	- BatchGetItems 
		- Returns attributes for multiple items from multiple tables
		- Request using Primary Key
		- Returns up to 16 MB of data, up to 100 items
		- Retrieves items in parallel to minimize latency
	- BatchWriteItems
		- Puts or deletes multiple items in multiple tables
		- writes up to 16MB of data, up to 25 put/delete requests
		- Conditions are not supported for performance reasons 

API Calls
	- Write
		- PutItem
		- UpdateItem
		- DeleteItem
		- BatchWriteItem
	- Read
		- GetItem
		- Query
		- Scan
		- BatchGetItem 


Provisioned vs on-demand capacity mode (normal flow: for newly launched products enable on-demand, collect some metrics, and then switch to Provisioned mode to accommodate normal traffic)
	- Provisioned
		- minimum capacity required
		- able to set budget
		- subject to throttling 
		- autoscaling available
		- risk of under provisioning - monitor your metrics!
		- lower price per API call
	- On-Demand
		- No minimum capacity
		- idle table not charged for read/write, but only for storage
		- no capacity planning required




*IAM
	- IAM role is a type of IAM identity (similar to IAM user) that can be authenticated and authorized to use AWS resources
	- IAM Policy defines permissions of an IAM identity




Some basic CLI operations
	- aws dynamodb \
		create-table \  
		--table-name Music \  
		--key-schema \ 
			AttributeName=Artist,KeyType=HASH \  
			AttributeName=SongType,KeyType=RANGE \ 
		--attribute-definitions \  
			AttributeName=Artist,AttributeType=S \ 
			AttributeName=SongType,AttributeType=S \  
		--provisioned-throughput \  
			ReadCapacityUnits=5,WriteCapacityUnits=5

	- aws dynamodb describe-table --table-name Music

	- aws dynamodb \ 
		put-item \ 
		--table-name Music \ 
		--item '{ 
			"Artist": {"S": "Dream Theater"},  
			"Album": {"S": "Images and Words"}, 
			"SongType": {"S": "Under a glass moon"} 
			}'

	- aws dynamodb scan --table-name Music

	-aws dynamodb \
		batch-write-item \ 
		--request-items file://request.json


	- aws dynamodb \ 
		update-item \ 
		--table-name PetInventory \ 
		--key \ 
			'{ "pet_species": { "S": "Monitor Lizard" }, "pet_id": { "N": "319" } }' \ 
		--update-expression "SET pet_available = :pr" \ 
		--expression-attribute-values '{":pr": {"BOOL": false}}' \ 
		--return-values ALL_NEW

	- aws dynamodb \ 
		get-item \ 
		--table-name PetInventory \ 
		--key \ 
			'{ "pet_species": { "S": "Monitor Lizard" }, "pet_id": { "N": "319" } }'

	- aws dynamodb \ 
		query \ 
		--table-name PetInventory \ 
		--key-condition-expression "pet_species = :ps" \ 
		--expression-attribute-values '{":ps":{"S":"Chinchilla"}}'

	- aws dynamodb \ 
		query \ 
		--table-name PetInventory \ 
		--key-condition-expression "pet_species = :ps AND pet_id= :pi" \ 
		--expression-attribute-values '{":ps":{"S":"Chinchilla"}, ":pi":{"N":"805"}}'


Dynamo DB local
	- can run instance of dynamo db locally
	- --endpoint-url : param for specifying where local dynamodb server is running
	- docker way:
		- sudo amazon-linux-extras install docker (on linux-2)
		- sudo service docker start
		- sudo usermod -a -G docker cloud_user (add user to docker group)
		- docker info (list info about docker daemon)
		- docker run -d -p 8000:8000 amazon-dynamodb-local 















